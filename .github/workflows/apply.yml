name: 'IAC FOR DATA PRODUCTS - CD'

on:
  pull_request_review:
    types:
      - submitted

env:
  TERRAFORM_VERSION: "1.3.2"
  TERRAFORM_DIRECTORY: data_products
  TF_IN_AUTOMATION: "True"
  GH_OWNER: lakehouse-mesh

permissions:
  contents: read

jobs:
  iac_data_product_cd:
    if: github.event.review.state == 'approved'
    runs-on: ubuntu-latest    

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Get PR ID
      id: pr-id
      env:
        TARGET_BRANCH: ${{ github.base_ref }}
      run: |        
        PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
        echo "Pull Request $PR_NUMBER merged, running on branch ${{ env.TARGET_BRANCH }}"
        echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT
        echo "BRANCH=$TARGET_BRANCH" >> $GITHUB_OUTPUT


    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Terraform Setup
      uses: ./.github/helpers/terraform_setup
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_gcp_sa_key: ${{ secrets.GOOGLE_CREDENTIALS }}

    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      run: terraform init


    # Download tf_plan generate during CI processs
    - name: Download Plan
      id: download-plan
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token:  ${{ secrets.GH_TOKEN }}
        workflow: plan.yml
        pr: ${{ steps.pr-id.outputs.PR_NUMBER }}
        name: ${{ steps.pr-id.outputs.BRANCH }}-tf-plan
        path: ${{ env.TERRAFORM_DIRECTORY }}


    # Terraform apply accordingly with plan 
    - name: Terraform Apply
      id: apply
      working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        GITHUB_OWNER: ${{ env.GH_OWNER }}      
      run: |
        echo 'apply<<EOF' >> $GITHUB_OUTPUT
        terraform apply -input=false -no-color tfplan >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT               


    # Save plan applied on the comment
    - name: Comment Apply
      id: comment-apply
      uses: peter-evans/create-or-update-comment@v2
      with:
        token: ${{ secrets.GH_TOKEN }}
        issue-number: ${{ steps.pr-id.outputs.PR_NUMBER }}
        body: |
          Terraform Apply:
          ```
          ${{ steps.apply.outputs.apply }}     