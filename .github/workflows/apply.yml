name: 'IAC FOR DATA PRODUCTS - CD'

on:
  pull_request:
    types:
      - closed
    branches:
      - main
      - dev

env:
  TERRAFORM_VERSION: "1.3.2"
  TERRAFORM_DIRECTORY: data_products
  TF_IN_AUTOMATION: "True"
  GH_OWNER: lakehouse-mesh

permissions:
  contents: read
jobs:
  GetDataProducts:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      matrix: ${{ steps.matrix.outputs.value }}

    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Get 
      - id: matrix
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
        run: |
          if git diff --name-only HEAD^1 HEAD | grep "^config" > /dev/null 2>&1; then
            git diff --name-only HEAD | \
              grep "^config" | \
              sort | uniq |  \
              xargs -I{} basename {} .yaml | \
              awk '{printf "\"%s\", ", $0}' | sed 's/, $/\n/; 1s/^/value=[/' | sed '$s/$/]/' >> test
          else
              echo "No data products changes found."
              echo 'value=[]' >> test
          fi


  TerraformApply:
    needs: [ GetDataProducts ]  
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        value: ${{fromJson(needs.GetDataProducts.outputs.matrix)}}        

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Get PR data (number and merged branch)
    - name: Get PR ID
      id: pr-id
      env:
        TARGET_BRANCH: ${{ github.base_ref }}
        PR_NUMBER: ${{ github.event.number }}
      run: |              
        echo "Pull Request $PR_NUMBER merged, running on branch ${{ env.TARGET_BRANCH }}"
        echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT
        echo "BRANCH=$TARGET_BRANCH" >> $GITHUB_OUTPUT
        if [ "$TARGET_BRANCH" = "main" ]; then
          echo "ENVIRONMENT=dev" >> $GITHUB_OUTPUT 
        elif [ "$TARGET_BRANCH" = "dev" ]; then
          echo "ENVIRONMENT=prod" >> $GITHUB_OUTPUT 
        else
          echo "ENVIRONMENT=sandbox" >> $GITHUB_OUTPUT 
        fi          


    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Terraform Setup
      uses: ./.github/terraform_setup
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_gcp_sa_key: ${{ secrets.GOOGLE_CREDENTIALS }}

    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      run: |
        terraform init --reconfigure \
          -backend-config=bucket=${{ secrets.BACKEND_BUCKET }} \
          -backend-config=prefix=${{ steps.pr-id.outputs.ENVIRONMENT }}/${{ matrix.value }}


    # Download tf_plan generate during CI processs
    - name: Download Plan
      id: download-plan
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token:  ${{ secrets.GH_TOKEN }}
        workflow: plan.yml
        pr: ${{ steps.pr-id.outputs.PR_NUMBER }}
        name: ${{ steps.pr-id.outputs.BRANCH }}-${{ matrix.value }}-tfplan
        path: ${{ env.TERRAFORM_DIRECTORY }}


    # Terraform apply accordingly with plan 
    - name: Terraform Apply
      id: apply
      working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        GITHUB_OWNER: ${{ env.GH_OWNER }}      
      run: |
        echo 'apply<<EOF' >> $GITHUB_OUTPUT
        terraform apply -input=false -no-color ${{ matrix.value }}-tfplan >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT               


    # Comment to PR what it was applied
    - name: Comment Apply
      id: comment-apply
      uses: peter-evans/create-or-update-comment@v2
      with:
        token: ${{ secrets.GH_TOKEN }}
        issue-number: ${{ steps.pr-id.outputs.PR_NUMBER }}
        body: |
          Terraform Apply for ${{ matrix.value }}:
          ```
          ${{ steps.apply.outputs.apply }}     