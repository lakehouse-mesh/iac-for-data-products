name: 'IAC FOR DATA PRODUCTS - CI'

on:
  pull_request:

env:
  TERRAFORM_VERSION: "1.3.2"
  TERRAFORM_DIRECTORY: data_products
  TF_IN_AUTOMATION: "True"
  GH_OWNER: lakehouse-mesh

permissions:
  contents: read

jobs:
  Lint:
    runs-on: ubuntu-latest
    if: github.event.review.state != 'approved'

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: format
      run: terraform fmt --recursive -check


  # Get data product that has changed or created in the PR
  GetDataProducts:
    needs: [ Lint ]
    runs-on: ubuntu-latest
    if: github.event.review.state != 'approved'
    outputs:
      matrix: ${{ steps.matrix.outputs.value }}
      exec_plan: ${{ steps.matrix.outputs.exec_plan }}

    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Checkout the repository to the GitHub Actions runner
      - id: matrix
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
        env:
          GITHUB_REF: ${{ github.ref }}
          TARGET_BRANCH: ${{ github.base_ref }}    
        run: |
          if git diff --name-only HEAD^1 HEAD | grep "^config" > /dev/null 2>&1; then
            git diff --name-only HEAD | \
              grep "^config" | \
              sort | uniq |  \
              xargs -I{} basename {} .yaml | \
              awk '{printf "\"%s\", ", $0}' | sed 's/, $/\n/; 1s/^/value=[/' | sed '$s/$/]/' >> $GITHUB_OUTPUT
            echo 'exec_plan=1' >> $GITHUB_OUTPUT
          else
              echo "No data products changes found."
              echo 'value=[]' >> $GITHUB_OUTPUT
              echo 'exec_plan=0' >> $GITHUB_OUTPUT
          fi



  # Get data product that has changed or created in the PR
  TerraformPlan:
    needs: [ GetDataProducts ]
    runs-on: ubuntu-latest
    if: github.event.review.state != 'approved' && needs.GetDataProducts.outputs.exec_plan == 1

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        value: ${{fromJson(needs.GetDataProducts.outputs.matrix)}}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Prepare branch with variable files and get PR information
    - name: Branch Checks
      id: branch_check
      working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      env:
        GITHUB_REF: ${{ github.ref }}
        TARGET_BRANCH: ${{ github.base_ref }}
      run: |
        echo "Pull Request ${{ env.GITHUB_REF }} target branch ${{ env.TARGET_BRANCH }}"
        PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
        echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT
        echo "BRANCH=$TARGET_BRANCH" >> $GITHUB_OUTPUT
        if [ "$TARGET_BRANCH" = "main" ]; then
          echo "${{ secrets.TF_PROD }}" | base64 --decode > variables.tfvars
          echo "ENVIRONMENT=dev" >> $GITHUB_OUTPUT 
        elif [ "$TARGET_BRANCH" = "dev" ]; then
          echo "${{ secrets.TF_DEV }}" | base64 --decode > variables.tfvars
          echo "ENVIRONMENT=prod" >> $GITHUB_OUTPUT 
        else
          echo "${{ secrets.TF_SANDBOX }}" | base64 --decode > variables.tfvars
          echo "ENVIRONMENT=sandbox" >> $GITHUB_OUTPUT 
        fi  

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Terraform Setup
      uses: ./.github/terraform_setup
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_gcp_sa_key: ${{ secrets.GOOGLE_CREDENTIALS }}

    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      run: |
        terraform init --reconfigure \
          -backend-config=bucket=${{ secrets.BACKEND_BUCKET }} \
          -backend-config=prefix=${{ steps.branch_check.outputs.ENVIRONMENT }}/${{ matrix.value }}

            
    - name: Terraform Plan
      id: plan
      working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        GITHUB_OWNER: ${{ env.GH_OWNER }}
      run: |
        echo 'plan<<EOF' >> $GITHUB_OUTPUT
        terraform plan -var='data_product=${{ matrix.value }}' -var-file=variables.tfvars -no-color -out=${{ matrix.value }}-tfplan >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT         

    # Save plan to be applied
    - name: Save Artifact
      id: save-artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.branch_check.outputs.BRANCH }}-${{ matrix.value }}-tfplan
        path: ${{ env.TERRAFORM_DIRECTORY }}/${{ matrix.value }}-tfplan           

    # Comment PR with plan to be applied
    - name: Comment Plan
      id: comment-plan
      uses: peter-evans/create-or-update-comment@v2
      with:
        token: ${{ secrets.GH_TOKEN }}
        issue-number: ${{ steps.branch_check.outputs.PR_NUMBER }}
        body: |
          Terraform Plan for ${{ matrix.value }}:
          ```
          ${{ steps.plan.outputs.plan }}
          ```
          Plan saved to GH artifacts.
