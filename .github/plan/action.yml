name: 'Terraform CI'
description: ''
inputs:
  terraform_directory:
    description: 'Directory which main.tf from data products is located'
    required: true
  terraform_gcp_sa_key:
    description: 'JSON key for GCP service account'
    required: true    
  terraform_version:
    description: 'Terraform version used'
    required: true
    default: 1.3.2
  github_token: 
    description: 'GitHub token for auth'
    required: true    
  github_owner: 
    description: 'GitHub owner'
    required: false
    default: ""
  pr_id:
    description: 'Pull request IDs'
    required: true
  environment:
    description: 'Deployment environment'
    required: true

runs:
  using: "composite"
  steps:
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform_version }}
        terraform_wrapper: false

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ inputs.terraform_gcp_sa_key }}

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v0.6.0'        

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      working-directory: ${{ inputs.terraform_directory }}
      shell: bash
      run: |
        terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: format
      shell: bash
      run: |
        terraform fmt --recursive -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      working-directory: ${{ inputs.terraform_directory }}
      shell: bash
      run: |
        echo 'plan<<EOF' >> $GITHUB_OUTPUT
        terraform plan -var='data_product=data-product-a' -var-file ./env_vars/${{ inputs.environment }}.tfvars -no-color -out=tfplan >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT        

    # Save plan to be applied
    - name: Save Artifact
      id: save-artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.pr_id }}-tf-plan
        path: ${{ inputs.terraform_directory }}/tfplan      

    - name: Comment Plan
      id: comment-plan
      uses: peter-evans/create-or-update-comment@v2
      with:
        token: ${{ inputs.github_token }}
        issue-number: ${{ inputs.pr_id }}
        body: |
          Terraform Plan:
          ```
          ${{ steps.plan.outputs.plan }}
          ```
          Plan saved to GH artifacts.          